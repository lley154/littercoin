(program 1.0.0 [(Λ __helios__common__unStringData -> [(Λ __helios__common__stringData -> [(Λ __helios__string____add -> [(Λ __helios__bool__show -> [(Λ __helios__common__concat -> [(Λ __helios__common__list_0 -> [(Λ __helios__common__any -> [(Λ __helios__common__is_in_bytearray_list -> [(Λ __helios__value__get_map_keys -> [(Λ __helios__value__merge_map_keys -> [(Λ __helios__common__not -> [(Λ __helios__value__get_inner_map_int -> [(Λ __helios__value__compare_inner -> [(Λ __helios__value__get_inner_map -> [(Λ __helios__value__compare -> [(Λ __helios__value____eq -> [(Λ __helios__common__fold -> [(Λ __helios__list__fold -> [(Λ __helios__value__add_or_subtract_inner -> [(Λ __helios__value__add_or_subtract -> [(Λ __helios__value____add -> [(Λ __helios__common__fields -> [(Λ __helios__common__fields_after_0 -> [(Λ __helios__common__field_1 -> [(Λ __helios__txoutput__value -> [(Λ __helios__value__ZERO -> [(Λ __helios__txoutput__sum_values -> [(Λ __helios__common__filter -> [(Λ __helios__common__filter_list -> [(Λ __helios__common__fields_after_1 -> [(Λ __helios__common__field_2 -> [(Λ __helios__tx__outputs -> [(Λ __helios__tx__filter_outputs -> [(Λ __helios__credential__is_validator -> [(Λ __helios__common__field_0 -> [(Λ __helios__credential__validator__hash -> [(Λ __helios__common__assert_constr_index -> [(Λ __helios__credential__validator__cast -> [(Λ __helios__address__credential -> [(Λ __helios__txoutput__address -> [(Λ __helios__txoutput__is_locked_by -> [(Λ __helios__tx__outputs_locked_by -> [(Λ __helios__tx__value_locked_by -> [(Λ __helios__bool__and -> [(Λ __helios__int____gt -> [(Λ __helios__value__new -> [(Λ __helios__common__list_1 -> [(Λ __helios__common__list_2 -> [(Λ __helios__assetclass__new -> [(Λ __helios__assetclass__ADA -> [(Λ __helios__value__lovelace -> [(Λ __helios__int____sub -> [(Λ __helios__outputdatum__inline__data -> [(Λ __helios__txoutput__datum -> [(Λ __helios__list__get -> [(Λ __helios__common____eq -> [(Λ __helios__int____eq -> [(Λ __helios__value____geq -> [(Λ __helios__value__contains -> [(Λ __helios__common__fields_after_2 -> [(Λ __helios__common__fields_after_3 -> [(Λ __helios__common__field_4 -> [(Λ __helios__tx__minted -> [(Λ __helios__common__fields_after_4 -> [(Λ __helios__common__fields_after_5 -> [(Λ __helios__common__fields_after_6 -> [(Λ __helios__common__fields_after_7 -> [(Λ __helios__common__field_8 -> [(Λ __helios__tx__signatories -> [(Λ __helios__tx__is_signed_by -> [(Λ __helios__int____lt -> [(Λ __helios__credential__is_pubkey -> [(Λ __helios__credential__pubkey__hash -> [(Λ __helios__credential__pubkey__cast -> [(Λ __helios__txoutput__is_sent_to -> [(Λ __helios__tx__outputs_sent_to -> [(Λ __helios__common__identity -> [(Λ __helios__hash__new -> [(Λ __helios__int____mul -> [(Λ __helios__value__map_quantities -> [(Λ __helios__value____mul -> [(Λ __helios__int____neg -> [(Λ __helios__scriptcontext__tx -> [(Λ __helios__txinput__output -> [(Λ __helios__common__find -> [(Λ __helios__list__find -> [(Λ __helios__tx__inputs -> [(Λ __helios__txinput__output_id -> [(Λ __helios__scriptcontext__get_spending_purpose_output_id -> [(Λ __helios__scriptcontext__get_current_input -> [(Λ __helios__scriptcontext__get_current_validator_hash -> [(Λ __helios__string__encode_utf8 -> [(Λ __helios__int____div -> [(Λ __helios__common__tuple_fields_after_0 -> [(Λ __helios__common__tuple_field_1 -> [(Λ __helios__common__tuple_field_0 -> [(Λ __module__validator__Datum__adaAmount -> [(Λ __module__validator__Datum__lcAmount -> [(Λ __module__validator__Datum__from_data -> [(Λ __module__validator__Datum__get_ratio -> [(Λ __module__validator__Redeemer__Burn__pkhBA -> [(Λ __module__validator__minAda -> [(Λ __module__validator__TT_MPH -> [(Λ __module__validator__ttMph -> [(Λ __module__validator__ttAssetclass -> [(Λ __module__validator__ttVal -> [(Λ __module__validator__LC_MPH -> [(Λ __module__validator__lcMph -> [(Λ __module__validator__lcAssetClass -> [(Λ __module__validator__OWNER_PKH -> [(Λ __module__validator__ownerPkh -> [(Λ __module__validator__MERCHANT_MPH -> [(Λ __module__validator__merchMph -> [(Λ __module__validator__merchAssetclass -> [(Λ __module__validator__merchVal -> [(Λ __module__validator__main -> (Λ datum -> (Λ redeemer -> (Λ ctx -> (force [[[(force (builtin ifThenElse)) [[[x4 x3] x2] x1]] (delay ())] (delay (error))]))))) (Λ datum -> (Λ redeemer -> (Λ ctx -> [(Λ vHash -> [(Λ tx -> [(Λ txOutput -> [(Λ e -> [[(Λ i -> (force [[[(force (builtin ifThenElse)) [[(builtin equalsInteger) x1] 0]] (delay (Λ _ -> [(Λ e -> [[(Λ i -> (force [[[(force (builtin ifThenElse)) [[(builtin equalsInteger) x1] 2]] (delay (Λ dat -> [(Λ outDat -> [(Λ addAdaDatumAmt -> [(Λ adaVal -> (force [[(force (builtin trace)) [x130 [[x128 [x129 "LCV1"]] (force [x127 [[x115 [[x88 x11] x12]] [[x110 x25] x1]]])]]] (delay [[x87 (delay [[x115 [[x88 x11] x12]] [[x110 x25] x1]])] (delay (force [[(force (builtin trace)) [x130 [[x128 [x129 "LCV2"]] (force [x127 [[x86 x2] [(builtin iData) 2000000]]])]]] (delay [[x86 x2] [(builtin iData) 2000000]])]))])])) [x79 [x33 x2]]]) [[x77 [x32 x1]] [x32 x13]]]) [x29 [x75 x1]]]))] (delay (Λ _ -> (force [[(force (builtin trace)) [x127 [x126 "LCV3: invalid datum"]]] (delay false)])))])) [(force (force (builtin fstPair))) [(builtin unConstrData) x1]]] x1]) [x71 [[x70 x4] [(builtin iData) 0]]]]))] (delay (force [[[(force (builtin ifThenElse)) [[(builtin equalsInteger) x1] 1]] (delay (Λ _ -> [(Λ e -> [[(Λ i -> (force [[[(force (builtin ifThenElse)) [[(builtin equalsInteger) x1] 2]] (delay (Λ dat -> [(Λ outDat -> [(Λ adaDatumAmt -> [(Λ adaVal -> [(Λ lcDatumAmt -> [(Λ lcMintVal -> (force [[(force (builtin trace)) [x132 [[x130 [x131 "LCV4: "]] (force [x129 [[x76 x4] [(builtin iData) 0]]])]]] (delay [[x89 (delay [[x89 (delay [[x89 (delay [[x89 (delay [[x76 x4] [(builtin iData) 0]])] (delay (force [[(force (builtin trace)) [x132 [[x130 [x131 "LCV5: "]] (force [x129 [[x117 [[x90 x13] x14]] [[x112 x27] x3]]])]]] (delay [[x117 [[x90 x13] x14]] [[x112 x27] x3]])]))])] (delay (force [[(force (builtin trace)) [x132 [[x130 [x131 "LCV6: "]] (force [x129 [[x74 [x70 x13]] x1]])]]] (delay [[x74 [x70 x13]] x1])]))])] (delay (force [[(force (builtin trace)) [x132 [[x130 [x131 "LCV7: "]] (force [x129 [[x63 x13] x22]])]]] (delay [[x63 x13] x22])]))])] (delay (force [[(force (builtin trace)) [x132 [[x130 [x131 "LCV8: "]] (force [x129 [[x89 (delay [[x62 [(builtin iData) 0]] x2])] (delay [[x62 x2] [x36 x5]])]])]]] (delay [[x89 (delay [[x62 [(builtin iData) 0]] x2])] (delay [[x62 x2] [x36 x5]])])]))])])) [[x86 x23] x1]]) [[x79 [x33 x3]] [x33 x15]]]) [x79 [x33 x2]]]) [[x77 [x32 x1]] [x32 x13]]]) [x29 [x75 x1]]]))] (delay (Λ _ -> (force [[(force (builtin trace)) [x127 [x126 "LCV9: invalid datum"]]] (delay false)])))])) [(force (force (builtin fstPair))) [(builtin unConstrData) x1]]] x1]) [x71 [[x70 x4] [(builtin iData) 0]]]]))] (delay (Λ red -> [(Λ e -> [[(Λ i -> (force [[[(force (builtin ifThenElse)) [[(builtin equalsInteger) x1] 2]] (delay (Λ dat -> [(Λ outDat -> [(Λ adaDatumAmt -> [(Λ adaVal -> [(Λ lcDatumAmt -> [(Λ lcBurnVal -> [(Λ ratio -> [(Λ adaWithdraw -> [(Λ adaWithdrawVal -> [(Λ merchPkh -> [(Λ merchOutTxs -> [[x94 (delay [[x94 (delay [[x94 (delay [[x94 (delay (force [[(force (builtin trace)) [x137 [[x135 [x136 "LCV10: "]] (force [x134 [[x81 x9] x4]])]]] (delay [[x81 x9] x4])]))] (delay (force [[(force (builtin trace)) [x137 [[x135 [x136 "LCV11: "]] (force [x134 [[x122 [[x95 x18] x19]] [[x117 x32] x8]]])]]] (delay [[x122 [[x95 x18] x19]] [[x117 x32] x8]])]))])] (delay (force [[(force (builtin trace)) [x137 [[x135 [x136 "LCV12: "]] (force [x134 [[x79 [x75 x18]] x6]])]]] (delay [[x79 [x75 x18]] x6])]))])] (delay (force [[(force (builtin trace)) [x137 [[x135 [x136 "LCV13: "]] (force [x134 [[x79 [x113 [[x83 x1] [(builtin iData) 2]]]] [[x117 x36] x23]]])]]] (delay [[x79 [x113 [[x83 x1] [(builtin iData) 2]]]] [[x117 x36] x23]])]))])] (delay (force [[(force (builtin trace)) [x137 [[x135 [x136 "LCV14: "]] (force [x134 [[x79 [x113 [[x83 x1] [(builtin iData) 1]]]] x3]])]]] (delay [[x79 [x113 [[x83 x1] [(builtin iData) 1]]]] x3])]))]) [[x61 x17] x1]]) [x58 [x35 x12]]]) [x84 x1]]) [[x55 x3] x1]]) (force [x33 x17])]) [[x51 [[x86 x23] x1]] (force [x50 [(builtin iData) 1]])]]) [[x79 [x33 x15]] [x33 x3]]]) [x79 [x33 x2]]]) [[x77 [x32 x13]] [x32 x1]]]) [x29 [x75 x1]]]))] (delay (Λ _ -> (force [[(force (builtin trace)) [x127 [x126 "LCV15: invalid datum"]]] (delay false)])))])) [(force (force (builtin fstPair))) [(builtin unConstrData) x1]]] x1]) [x71 [[x70 x4] [(builtin iData) 0]]]]))]))])) [(force (force (builtin fstPair))) [(builtin unConstrData) x1]]] x1]) x5]) [[x79 x1] x2]]) [x37 x2]]) (force [x28 x1])])))]) [[x69 x1] [(builtin iData) 1]]]) [[x65 x1] (force [x22 [x112 "Merchant Token Littercoin"]])]]) [x35 x1]]) [(builtin bData) #e57b84e97afe75117f906e57e66ca0718e25c9db3c4076f2bf78555b]]) [x33 x1]]) [(builtin bData) #b9abcf6867519e28042048aa11207214a52e6d5d3288b752d1c27682]]) [[x60 x1] (force [x17 [x107 "Littercoin"]])]]) [x30 x1]]) [(builtin bData) #67fcf82bf28050e0fb1682d4eb9a0d6818a85d9e499273460650dafa]]) [[x60 x1] [(builtin iData) 1]]]) [[x56 x1] (force [x13 [x103 "Thread Token Littercoin"]])]]) [x26 x1]]) [(builtin bData) #e0db2efbdc69be9f190d62f3a1b6d38d119e7a4622f80d11bfa56858]]) [x51 [(builtin iData) 2000000]]]) x66]) (Λ self -> (delay [[x8 [x4 x1]] [x3 x1]]))]) x22]) x3]) x1]) (Λ self -> [(force (builtin headList)) [(builtin unListData) x1]])]) (Λ self -> [(force (builtin headList)) [x2 x1]])]) (Λ self -> [(force (builtin tailList)) [(builtin unListData) x1]])]) (Λ self -> [(Λ a -> (Λ b -> [(builtin iData) [[(builtin divideInteger) x2] [(builtin unIData) x1]]])) [(builtin unIData) x1]])]) (Λ self -> [(Λ self -> (delay [(builtin bData) [(builtin encodeUtf8) x1]])) [x92 x1]])]) (Λ self -> (delay [x56 [x54 [x53 [x52 [x8 (force [x2 x1])]]]]]))]) (Λ self -> (delay [(Λ id -> [[x6 [x5 [x9 x2]]] (Λ input -> [[(builtin equalsData) [x5 x1]] x2])]) (force [x2 x1])]))]) (Λ self -> (delay [x55 [x66 x1]]))]) x53]) x52]) (Λ self -> [(Λ self -> (Λ fn -> [[x4 x2] x1])) [(builtin unListData) x1]])]) (Λ self -> (Λ fn -> [(Λ recurse -> [[[x1 x1] x3] x2]) (Λ recurse -> (Λ self -> (Λ fn -> (force [[[(force (builtin ifThenElse)) [(force (builtin nullList)) x2]] (delay (error))] (delay (force [[[(force (builtin ifThenElse)) [x1 [(force (builtin headList)) x2]]] (delay [(force (builtin headList)) x2])] (delay [[[x3 x3] [(force (builtin tailList)) x2]] x1])]))]))))]))]) x60]) x48]) (Λ self -> [(Λ self -> (delay [(builtin iData) [[(builtin multiplyInteger) x1] -1]])) [(builtin unIData) x1]])]) (Λ self -> (Λ scale -> [(Λ scale -> [[x4 x3] (Λ qty -> [[(builtin multiplyInteger) x1] x2])]) [(builtin unIData) x1]]))]) (Λ self -> (Λ op -> [(Λ self -> [(Λ recurseInner -> [(Λ recurseOuter -> [(builtin mapData) [[x1 x1] x3]]) (Λ recurseOuter -> (Λ outer -> (force [[[(force (builtin ifThenElse)) [(force (builtin nullList)) x1]] (delay [(builtin mkNilPairData) ()])] (delay [(Λ head -> [[(force (builtin mkCons)) [[(builtin mkPairData) [(force (force (builtin fstPair))) x1]] [(builtin mapData) [[x4 x4] [(builtin unMapData) [(force (force (builtin sndPair))) x1]]]]]] [[x3 x3] [(force (builtin tailList)) x2]]]) [(force (builtin headList)) x1]])])))]) (Λ recurseInner -> (Λ inner -> (force [[[(force (builtin ifThenElse)) [(force (builtin nullList)) x1]] (delay [(builtin mkNilPairData) ()])] (delay [(Λ head -> [[(force (builtin mkCons)) [[(builtin mkPairData) [(force (force (builtin fstPair))) x1]] [(builtin iData) [x5 [(builtin unIData) [(force (force (builtin sndPair))) x1]]]]]] [[x3 x3] [(force (builtin tailList)) x2]]]) [(force (builtin headList)) x1]])])))]) [(builtin unMapData) x2]]))]) (Λ self -> [(Λ a -> (Λ b -> [(builtin iData) [[(builtin multiplyInteger) x2] [(builtin unIData) x1]]])) [(builtin unIData) x1]])]) x1]) (Λ self -> x1)]) (Λ self -> (Λ pubKeyHash -> [[x45 x2] (Λ output -> [[x4 x1] x2])]))]) (Λ self -> (Λ pkh -> [(Λ credential -> (force [[[(force (builtin ifThenElse)) [x6 x1]] (delay [[(builtin equalsData) x2] [x5 [x4 x1]]])] (delay false)])) [x38 [x37 x2]]]))]) (Λ data -> [[x38 x1] 0])]) x38]) (Λ self -> [[(builtin equalsInteger) [(force (force (builtin fstPair))) [(builtin unConstrData) x1]]] 0])]) (Λ self -> [(Λ a -> (Λ b -> [[(builtin lessThanInteger) x2] [(builtin unIData) x1]])) [(builtin unIData) x1]])]) (Λ self -> (Λ hash -> [[x65 [(builtin unListData) [x3 x2]]] (Λ signatory -> [[(builtin equalsData) x1] x2])]))]) x1]) (Λ self -> [(force (builtin headList)) [x2 x1]])]) (Λ self -> [(force (builtin tailList)) [x2 x1]])]) (Λ self -> [(force (builtin tailList)) [x2 x1]])]) (Λ self -> [(force (builtin tailList)) [x2 x1]])]) (Λ self -> [(force (builtin tailList)) [x4 x1]])]) x1]) (Λ self -> [(force (builtin headList)) [x2 x1]])]) (Λ self -> [(force (builtin tailList)) [x2 x1]])]) (Λ self -> [(force (builtin tailList)) [x31 x1]])]) x1]) (Λ self -> (Λ other -> [[[x45 (Λ a -> (Λ b -> [x51 [[(builtin lessThanInteger) x2] x1]]))] x2] x1]))]) x1]) (Λ self -> (Λ other -> [[(builtin equalsData) x2] x1]))]) (Λ self -> [(Λ self -> (Λ index -> [(Λ recurse -> [[[x1 x1] x3] [(builtin unIData) x2]]) (Λ recurse -> (Λ self -> (Λ index -> (force [[[(force (builtin ifThenElse)) [(force (builtin nullList)) x2]] (delay (error))] (delay (force [[[(force (builtin ifThenElse)) [[(builtin lessThanInteger) x1] 0]] (delay (error))] (delay (force [[[(force (builtin ifThenElse)) [[(builtin equalsInteger) x1] 0]] (delay [(force (builtin headList)) x2])] (delay [[[x3 x3] [(force (builtin tailList)) x2]] [[(builtin subtractInteger) x1] 1]])]))]))]))))])) [(builtin unListData) x1]])]) x23]) x18]) (Λ self -> [(Λ a -> (Λ b -> [(builtin iData) [[(builtin subtractInteger) x2] [(builtin unIData) x1]]])) [(builtin unIData) x1]])]) (Λ i -> [[x6 x2] x1])]) [[x1 [(builtin bData) #]] [(builtin bData) #]]]) (Λ mintingPolicyHash -> (Λ tokenName -> [[(builtin constrData) 0] [[x3 x2] x1]]))]) (Λ arg0 -> (Λ arg1 -> [[(force (builtin mkCons)) x2] [x3 x1]]))]) (Λ a -> [[(force (builtin mkCons)) x1] x42])]) (Λ assetClass -> (Λ i -> (force [[[(force (builtin ifThenElse)) [[(builtin equalsInteger) 0] [(builtin unIData) x1]]] (delay x22)] (delay [[(Λ mintingPolicyHash -> (Λ tokenName -> [(builtin mapData) [[(force (builtin mkCons)) [[(builtin mkPairData) x2] [(builtin mapData) [[(force (builtin mkCons)) [[(builtin mkPairData) x1] x3]] [(builtin mkNilPairData) ()]]]]] [(builtin mkNilPairData) ()]]])) [x13 x2]] [x24 x2]])])))]) (Λ self -> [(Λ a -> (Λ b -> [x37 [[(builtin lessThanEqualsInteger) x2] [(builtin unIData) x1]]])) [(builtin unIData) x1]])]) (Λ a -> (Λ b -> (force [[[(force (builtin ifThenElse)) (force x2)] (delay (force x1))] (delay false)])))]) (Λ self -> (Λ validatorHash -> [x18 [[x3 x2] x1]]))]) (Λ self -> (Λ validatorHash -> [[x11 x2] (Λ output -> [[x4 x1] x2])]))]) (Λ self -> (Λ hash -> [(Λ credential -> (force [[[(force (builtin ifThenElse)) [x10 x1]] (delay [[(builtin equalsData) x2] [x8 [x6 x1]]])] (delay false)])) [x4 [x3 x2]]]))]) x5]) x4]) (Λ data -> [[x2 x1] 1])]) (Λ data -> (Λ i -> (force [[[(force (builtin ifThenElse)) [[(builtin equalsInteger) [(force (force (builtin fstPair))) [(builtin unConstrData) x2]]] x1]] (delay x2)] (delay (error))])))]) x1]) (Λ self -> [(force (builtin headList)) [x14 x1]])]) (Λ self -> [[(builtin equalsInteger) [(force (force (builtin fstPair))) [(builtin unConstrData) x1]]] 1])]) (Λ self -> (Λ fn -> [(builtin listData) [[x6 [(builtin unListData) [x3 x2]]] x1]]))]) x1]) (Λ self -> [(force (builtin headList)) [x2 x1]])]) (Λ self -> [(force (builtin tailList)) [x8 x1]])]) (Λ self -> (Λ fn -> [[[x3 x2] x1] x25]))]) (Λ self -> (Λ fn -> (Λ nil -> [(Λ recurse -> [[[x1 x1] x4] x3]) (Λ recurse -> (Λ self -> (Λ fn -> (force [[[(force (builtin ifThenElse)) [(force (builtin nullList)) x2]] (delay x4)] (delay (force [[[(force (builtin ifThenElse)) [x1 [(force (builtin headList)) x2]]] (delay [[(force (builtin mkCons)) [(force (builtin headList)) x2]] [[[x3 x3] [(force (builtin tailList)) x2]] x1]])] (delay [[[x3 x3] [(force (builtin tailList)) x2]] x1])]))]))))])))]) (Λ outputs -> [[[x10 x1] (Λ prev -> (Λ txOutput -> [[x9 x2] [x5 x1]]))] x2])]) [(builtin mapData) [(builtin mkNilPairData) ()]]]) x1]) (Λ self -> [(force (builtin headList)) [x2 x1]])]) (Λ self -> [(force (builtin tailList)) [x2 x1]])]) (Λ self -> [(force (force (builtin sndPair))) [(builtin unConstrData) x1]])]) (Λ self -> (Λ other -> [[[x3 (Λ a -> (Λ b -> [[(builtin addInteger) x2] x1]))] x2] x1]))]) (Λ op -> (Λ a -> (Λ b -> [[(Λ a -> (Λ b -> [(Λ recurse -> [(builtin mapData) [[[x1 x1] [[x16 x3] x2]] [(builtin mkNilPairData) ()]]]) (Λ recurse -> (Λ keys -> (Λ result -> (force [[[(force (builtin ifThenElse)) [(force (builtin nullList)) x2]] (delay x1)] (delay [[(Λ key -> (Λ tail -> [(Λ item -> (force [[[(force (builtin ifThenElse)) [(force (builtin nullList)) x1]] (delay x2)] (delay [[(force (builtin mkCons)) [[(builtin mkPairData) x3] [(builtin mapData) x1]]] x2])])) [[[x11 x10] [[x16 x7] x2]] [[x16 x6] x2]]])) [(force (builtin headList)) x2]] [[[x3 x3] [(force (builtin tailList)) x2]] x1]])]))))])) [(builtin unMapData) x2]] [(builtin unMapData) x1]])))]) (Λ op -> (Λ a -> (Λ b -> [(Λ recurse -> [[[x1 x1] [[x13 x3] x2]] [(builtin mkNilPairData) ()]]) (Λ recurse -> (Λ keys -> (Λ result -> (force [[[(force (builtin ifThenElse)) [(force (builtin nullList)) x2]] (delay x1)] (delay [[(Λ key -> (Λ tail -> [(Λ sum -> (force [[[(force (builtin ifThenElse)) [[(builtin equalsInteger) x1] 0]] (delay x2)] (delay [[(force (builtin mkCons)) [[(builtin mkPairData) x3] [(builtin iData) x1]]] x2])])) [[x8 [[x15 x7] x2]] [[x15 x6] x2]]])) [(force (builtin headList)) x2]] [[[x3 x3] [(force (builtin tailList)) x2]] x1]])]))))])))]) (Λ self -> [(Λ self -> (Λ fn -> (Λ z -> [[[x5 x3] x2] x1]))) [(builtin unListData) x1]])]) (Λ self -> (Λ fn -> (Λ z -> [(Λ recurse -> [[[[x1 x1] x4] x3] x2]) (Λ recurse -> (Λ self -> (Λ fn -> (Λ z -> (force [[[(force (builtin ifThenElse)) [(force (builtin nullList)) x3]] (delay x1)] (delay [[[[x4 x4] [(force (builtin tailList)) x3]] x2] [[x2 x1] [(force (builtin headList)) x3]]])])))))])))]) (Λ self -> (Λ other -> [[[x3 (Λ a -> (Λ b -> [[(builtin equalsInteger) x2] x1]))] x2] x1]))]) (Λ comp -> (Λ a -> (Λ b -> [[(Λ a -> (Λ b -> [(Λ recurse -> [[x1 x1] [[x11 x3] x2]]) (Λ recurse -> (Λ keys -> (force [[[(force (builtin ifThenElse)) [(force (builtin nullList)) x1]] (delay true)] (delay [(Λ key -> (force [[[(force (builtin ifThenElse)) [x12 [[[x10 x8] [[x9 x5] x1]] [[x9 x4] x1]]]] (delay false)] (delay [[x3 x3] [(force (builtin tailList)) x2]])])) [(force (builtin headList)) x1]])])))])) [(builtin unMapData) x2]] [(builtin unMapData) x1]])))]) (Λ map -> (Λ mph -> [(Λ recurse -> [[x1 x1] x3]) (Λ recurse -> (Λ map -> (force [[[(force (builtin ifThenElse)) [(force (builtin nullList)) x1]] (delay [(builtin mkNilPairData) ()])] (delay (force [[[(force (builtin ifThenElse)) [[(builtin equalsData) [(force (force (builtin fstPair))) [(force (builtin headList)) x1]]] x3]] (delay [(builtin unMapData) [(force (force (builtin sndPair))) [(force (builtin headList)) x1]]])] (delay [[x2 x2] [(force (builtin tailList)) x1]])]))])))]))]) (Λ comp -> (Λ a -> (Λ b -> [(Λ recurse -> [[x1 x1] [[x7 x3] x2]]) (Λ recurse -> (Λ keys -> (force [[[(force (builtin ifThenElse)) [(force (builtin nullList)) x1]] (delay true)] (delay [(Λ key -> (force [[[(force (builtin ifThenElse)) [x8 [[x6 [[x7 x5] x1]] [[x7 x4] x1]]]] (delay false)] (delay [[x3 x3] [(force (builtin tailList)) x2]])])) [(force (builtin headList)) x1]])])))])))]) (Λ map -> (Λ key -> [(Λ recurse -> [[[x1 x1] x3] x2]) (Λ recurse -> (Λ map -> (Λ key -> (force [[[(force (builtin ifThenElse)) [(force (builtin nullList)) x2]] (delay 0)] (delay (force [[[(force (builtin ifThenElse)) [[(builtin equalsData) [(force (force (builtin fstPair))) [(force (builtin headList)) x2]]] x1]] (delay [(builtin unIData) [(force (force (builtin sndPair))) [(force (builtin headList)) x2]]])] (delay [[[x3 x3] [(force (builtin tailList)) x2]] x1])]))]))))]))]) (Λ b -> [[[(force (builtin ifThenElse)) x1] false] true])]) (Λ a -> (Λ b -> [(Λ aKeys -> [(Λ recurse -> [(Λ uniqueBKeys -> [[x10 x3] x1]) [[[x1 x1] x2] x3]]) (Λ recurse -> (Λ keys -> (Λ map -> (force [[[(force (builtin ifThenElse)) [(force (builtin nullList)) x1]] (delay x10)] (delay [(Λ key -> (force [[[(force (builtin ifThenElse)) [[x9 x5] x1]] (delay [[[x4 x4] x3] [(force (builtin tailList)) x2]])] (delay [[(force (builtin mkCons)) x1] [[[x4 x4] x3] [(force (builtin tailList)) x2]]])])) [(force (force (builtin fstPair))) [(force (builtin headList)) x1]]])]))))]) [x3 x2]]))]) (Λ map -> [(Λ recurse -> [[x1 x1] x2]) (Λ recurse -> (Λ map -> (force [[[(force (builtin ifThenElse)) [(force (builtin nullList)) x1]] (delay x6)] (delay [[(force (builtin mkCons)) [(force (force (builtin fstPair))) [(force (builtin headList)) x1]]] [[x2 x2] [(force (builtin tailList)) x1]]])])))])]) (Λ lst -> (Λ key -> [[x3 x2] (Λ item -> [[(builtin equalsData) x1] x2])]))]) (Λ self -> (Λ fn -> [(Λ recurse -> [[[x1 x1] x3] x2]) (Λ recurse -> (Λ self -> (Λ fn -> (force [[[(force (builtin ifThenElse)) [(force (builtin nullList)) x2]] (delay false)] (delay (force [[[(force (builtin ifThenElse)) [x1 [(force (builtin headList)) x2]]] (delay true)] (delay [[[x3 x3] [(force (builtin tailList)) x2]] x1])]))]))))]))]) [(builtin mkNilData) ()]]) (Λ a -> (Λ b -> [(Λ recurse -> [[[x1 x1] x2] x3]) (Λ recurse -> (Λ lst -> (Λ rem -> (force [[[(force (builtin ifThenElse)) [(force (builtin nullList)) x1]] (delay x2)] (delay [[(force (builtin mkCons)) [(force (builtin headList)) x1]] [[[x3 x3] x2] [(force (builtin tailList)) x1]]])]))))]))]) (Λ self -> (delay [x3 [[[(force (builtin ifThenElse)) x1] "true"] "false"]]))]) (Λ self -> [(Λ self -> (Λ other -> [x4 [[(builtin appendString) x2] [x5 x1]]])) [x3 x1]])]) (Λ s -> [(builtin bData) [(builtin encodeUtf8) x1]])]) (Λ d -> [(builtin decodeUtf8) [(builtin unBData) x1]])])